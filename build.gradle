/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jlleitschuh.gradle:ktlint-gradle:10.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.20"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.20" apply false
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0" apply false
    id "org.jetbrains.kotlinx.kover" version "0.7.0" apply false
}

allprojects {

    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        outputToConsole = true
    }
}

subprojects {
    group = 'com.amazon.ion'
    ext.kotlin_version = "1.6.20"

    apply {
        plugin("org.jetbrains.kotlin.jvm")
        plugin("org.jetbrains.kotlinx.kover")
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    def generatedVersionDir = "${buildDir}/generated-version"

    plugins.withId('org.jetbrains.kotlin.jvm', { _ ->
        sourceSets {
            main {
                output.dir(generatedVersionDir, builtBy: 'generateVersionAndHashProperties')
            }
        }

        // generates a build properties file with the current library version and most recent commit hash
        task generateVersionAndHashProperties {
            doLast {
                def propertiesFile = file "$generatedVersionDir/${project.name}.properties"
                propertiesFile.parentFile.mkdirs()
                def properties = new Properties()

                // get current subproject version
                properties.setProperty("version", version.toString())

                // get most recent short commit hash
                def commitHash = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = commitHash
                }
                properties.setProperty("commit", commitHash.toString().trim())
                propertiesFile.withWriter { properties.store(it, null) }
            }
        }
        processResources.dependsOn generateVersionAndHashProperties
    })
}
